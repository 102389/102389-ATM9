GTCEuStartupEvents.registry('gtceu:recipe_type', event => {
    event.create('mega_fusion_reactor')
        .category('gregstar')
        .setEUIO('in')
        .setMaxIOSize(2, 2, 2, 2)
        .setProgressBar(GuiTextures.PROGRESS_BAR_FUSION, FillDirection.LEFT_TO_RIGHT)
        .setSound(GTSoundEntries.ARC);

    GTRecipeTypes.FUSION_RECIPES.onRecipeBuild((builder, provider) => {
        GTRecipeTypes.get('mega_fusion_reactor').copyFrom(builder)
            .duration(Math.max((builder.duration / 2), 1))
            .EUt(builder.EUt() * 1.5)
            .save(provider);
    });
})

GTCEuStartupEvents.registry('gtceu:machine', event => {
    event.create('mega_fusion_reactor', 'multiblock')
        .rotationState(RotationState.NON_Y_AXIS)
        .recipeTypes(GTRecipeTypes.get('mega_fusion_reactor'))
        .recipeModifier(GTRecipeModifiers.PARALLEL_HATCH.apply(OverclockingLogic.NON_PERFECT_OVERCLOCK, GTRecipeModifiers.ELECTRIC_OVERCLOCK))
        .appearanceBlock(GCyMBlocks.CASING_ATOMIC)
        .pattern(definition => FactoryBlockPattern.start('BACK', 'UP', 'RIGHT')
            .aisle("  CCCC  ", "        ", "        ", "  CCCC  ", "        ", "  CCCC  ", "        ", "        ", "        ", "        ", "        ", "        ", "        ", "        ", "        ", "        ", "        ", "        ", "        ", "        ", "        ", "        ", "        ", "        ", "  CCCC  ", "        ", "  CCCC  ", "        ", "        ", "  CCCC  ")
            .aisle(" CAAAAC ", "  HHHH  ", "  HHHH  ", " C####C ", "  HHHH  ", " CC##CC ", "   HH   ", "        ", "   SS   ", "        ", "        ", "   SS   ", "  AAAA  ", " AAAAAA ", " AAAAAA ", " AAAAAA ", " AAAAAA ", "  AAAA  ", "   SS   ", "        ", "        ", "   SS   ", "        ", "   HH   ", " CC##CC ", "  HHHH  ", " C####C ", "  HHHH  ", "  HHHH  ", " CAAAAC ")
            .aisle("CAAAAAAC", " H####H ", " H####H ", "C######C", " H####H ", "CC####CC", "  HHHH  ", "   HH   ", "   CC   ", "   AA   ", "   AA   ", "   CC   ", " CC##CC ", " A####A ", " A####A ", " A####A ", " A####A ", " CC##CC ", "   CC   ", "   AA   ", "   AA   ", "   CC   ", "   HH   ", "  HHHH  ", "CC####CC", " H####H ", "C######C", " H####H ", " H####H ", "CAAAAAAC")
            .aisle("CAAGGAAC", " H####H ", " H####H ", "C######C", " H####H ", "C######C", " HH##HH ", "  H##H  ", " SC##CS ", "  A##A  ", "  A##A  ", " SC##CS ", " C####C ", " A####A ", " A####A ", " A####A ", " A####A ", " C####C ", " SC##CS ", "  A##A  ", "  A##A  ", " SC##CS ", "  H##H  ", " HH##HH ", "C######C", " H####H ", "C######C", " H####H ", " H####H ", "CAAGGAAC")
            .aisle("CAAGGAAC", " H####H ", " H####H ", "C######C", " H####H ", "C######C", " HH##HH ", "  H##H  ", " SC##CS ", "  A##A  ", "  A##A  ", " SC##CS ", " C####C ", " A####A ", " A####A ", " A####A ", " A####A ", " C####C ", " SC##CS ", "  A##A  ", "  A##A  ", " SC##CS ", "  H##H  ", " HH##HH ", "C######C", " H####H ", "C######C", " H####H ", " H####H ", "CAAGGAAC")
            .aisle("CAAAAAAC", " H####H ", " H####H ", "C######C", " H####H ", "CC####CC", "  HHHH  ", "   HH   ", "   CC   ", "   AA   ", "   AA   ", "   CC   ", " CC##CC ", " A####A ", " A####A ", " A####A ", " A####A ", " CC##CC ", "   CC   ", "   AA   ", "   AA   ", "   CC   ", "   HH   ", "  HHHH  ", "CC####CC", " H####H ", "C######C", " H####H ", " H####H ", "CAAAAAAC")
            .aisle(" CAAAAC ", "  HHHH  ", "  HHHH  ", " C####C ", "  HHHH  ", " CC##CC ", "   HH   ", "        ", "   SS   ", "        ", "        ", "   SS   ", "  AAAA  ", " AAAAAA ", " AAMAAA ", " AAAAAA ", " AAAAAA ", "  AAAA  ", "   SS   ", "        ", "        ", "   SS   ", "        ", "   HH   ", " CC##CC ", "  HHHH  ", " C####C ", "  HHHH  ", "  HHHH  ", " CAAAAC ")
            .aisle("  CCCC  ", "        ", "        ", "  CCCC  ", "        ", "  CCCC  ", "        ", "        ", "        ", "        ", "        ", "        ", "        ", "        ", "        ", "        ", "        ", "        ", "        ", "        ", "        ", "        ", "        ", "        ", "  CCCC  ", "        ", "  CCCC  ", "        ", "        ", "  CCCC  ")
            .where('M', Predicates.controller(Predicates.blocks(definition.get())))
            .where('H', Predicates.blocks("gtceu:fusion_coil"))
            .where('C', Predicates.blocks("gtceu:fusion_casing_mk3"))
            .where('G', Predicates.blocks("gtceu:fusion_glass"))
            .where('S', Predicates.blocks("mekanism:supercharged_coil"))
            .where('A', Predicates.blocks('gtceu:atomic_casing').setMinGlobalLimited(35)
                .or(Predicates.autoAbilities(definition.recipeTypes)))
            .where(' ', Predicates.any())
            .where('#', Predicates.air())
            .build())
        .shapeInfo(controller => MultiblockShapeInfo.builder()
            .aisle("  CCCC  ", "        ", "        ", "  CCCC  ", "        ", "  CCCC  ", "        ", "        ", "        ", "        ", "        ", "        ", "        ", "        ", "        ", "        ", "        ", "        ", "        ", "        ", "        ", "        ", "        ", "        ", "  CCCC  ", "        ", "  CCCC  ", "        ", "        ", "  CCCC  ")
            .aisle(" CAAAAC ", "  HHHH  ", "  HHHH  ", " C####C ", "  HHHH  ", " CC##CC ", "   HH   ", "        ", "   UU   ", "        ", "        ", "   UU   ", "  AAAA  ", " AAAAAA ", " AAAAAA ", " AAAAAA ", " AAAAAA ", "  AAAA  ", "   UU   ", "        ", "        ", "   UU   ", "        ", "   HH   ", " CC##CC ", "  HHHH  ", " C####C ", "  HHHH  ", "  HHHH  ", " CAAAAC ")
            .aisle("CAAAAAAC", " H####H ", " H####H ", "C######C", " H####H ", "CC####CC", "  HHHH  ", "   HH   ", "   CC   ", "   AA   ", "   AA   ", "   CC   ", " CC##CC ", " A####A ", " A####A ", " A####A ", " A####A ", " CC##CC ", "   CC   ", "   AA   ", "   AA   ", "   CC   ", "   HH   ", "  HHHH  ", "CC####CC", " H####H ", "C######C", " H####H ", " H####H ", "CAAAAAAC")
            .aisle("CAAGGAAC", " H####H ", " H####H ", "C######C", " H####H ", "C######C", " HH##HH ", "  H##H  ", " SC##Cs ", "  A##A  ", "  A##A  ", " SC##Cs ", " C####C ", " A####A ", " A####A ", " A####A ", " A####A ", " C####C ", " SC##Cs ", "  A##A  ", "  A##A  ", " SC##Cs ", "  H##H  ", " HH##HH ", "C######C", " H####H ", "C######C", " H####H ", " H####H ", "CAAGGAAC")
            .aisle("CAAGGAAC", " H####H ", " H####H ", "C######C", " H####H ", "C######C", " HH##HH ", "  H##H  ", " SC##Cs ", "  A##A  ", "  A##A  ", " SC##Cs ", " C####C ", " A####A ", " A####A ", " A####A ", " A####A ", " C####C ", " SC##Cs ", "  A##A  ", "  A##A  ", " SC##Cs ", "  H##H  ", " HH##HH ", "C######C", " H####H ", "C######C", " H####H ", " H####H ", "CAAGGAAC")
            .aisle("CAAEAAAC", " H####H ", " H####H ", "C######C", " H####H ", "CC####CC", "  HHHH  ", "   HH   ", "   CC   ", "   AA   ", "   AA   ", "   CC   ", " CC##CC ", " A####A ", " A####A ", " A####A ", " A####A ", " CC##CC ", "   CC   ", "   AA   ", "   AA   ", "   CC   ", "   HH   ", "  HHHH  ", "CC####CC", " H####H ", "C######C", " H####H ", " H####H ", "CAAAAAAC")
            .aisle(" CAAAAC ", "  HHHH  ", "  HHHH  ", " C####C ", "  HHHH  ", " CC##CC ", "   HH   ", "        ", "   uu   ", "        ", "        ", "   uu   ", "  AAAA  ", " AAFUAA ", " AAMAAA ", " AAIOAA ", " AAAAAA ", "  AAAA  ", "   uu   ", "        ", "        ", "   uu   ", "        ", "   HH   ", " CC##CC ", "  HHHH  ", " C####C ", "  HHHH  ", "  HHHH  ", " CAAAAC ")
            .aisle("  CCCC  ", "        ", "        ", "  CCCC  ", "        ", "  CCCC  ", "        ", "        ", "        ", "        ", "        ", "        ", "        ", "        ", "        ", "        ", "        ", "        ", "        ", "        ", "        ", "        ", "        ", "        ", "  CCCC  ", "        ", "  CCCC  ", "        ", "        ", "  CCCC  ")
            .where('M', controller, Direction.SOUTH)
            .where('H', Predicates.blocks(GTBlocks.FUSION_COIL.get()))
            .where("C", Predicates.blocks(GTBlocks.FUSION_CASING_MK3.get()))
            .where('G', Predicates.blocks(GTBlocks.FUSION_GLASS.get()))
            ["where(char,net.minecraft.world.level.block.state.BlockState)"]('U', Block.getBlock("mekanism:supercharged_coil").defaultBlockState().setValue(BlockProperties.FACING, Direction.EAST))
            ["where(char,net.minecraft.world.level.block.state.BlockState)"]('u', Block.getBlock("mekanism:supercharged_coil").defaultBlockState().setValue(BlockProperties.FACING, Direction.WEST))
            ["where(char,net.minecraft.world.level.block.state.BlockState)"]('S', Block.getBlock("mekanism:supercharged_coil").defaultBlockState().setValue(BlockProperties.FACING, Direction.DOWN))
            ["where(char,net.minecraft.world.level.block.state.BlockState)"]('s', Block.getBlock("mekanism:supercharged_coil").defaultBlockState().setValue(BlockProperties.FACING, Direction.UP))
            .where('E', GTMachines.ENERGY_INPUT_HATCH[6], Direction.WEST)
            .where('A', Block.getBlock("gtceu:atomic_casing"))
            .where('F', GTMachines.FLUID_IMPORT_HATCH[6], Direction.UP)
            .where('U', GTMachines.FLUID_EXPORT_HATCH[6], Direction.UP)
            .where('I', GTMachines.ITEM_IMPORT_BUS[6], Direction.SOUTH)
            .where('O', GTMachines.ITEM_EXPORT_BUS[6], Direction.SOUTH)
            .where(' ', Blocks.AIR)
            .build())
        .workableCasingRenderer("gtceu:block/casings/gcym/atomic_casing", /*"gtceu:block/casings/gcym/atomic_casing"*/
            "gtceu:block/multiblock/implosion_compressor", false)
})